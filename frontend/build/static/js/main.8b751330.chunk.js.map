{"version":3,"sources":["components/Modes.js","components/Weight.js","components/WordItem.js","components/WordsDesk.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Modes","props","refreshList","axios","get","then","res","setState","modesList","data","activateMode","catch","err","console","log","mode","activeMode","updateActiveMode","renderModes","state","map","NavItem","key","id","NavLink","active","onClick","href","name","description","min_time","max_time","this","className","Nav","Component","Weight","changeWeight","e","updateWeight","target","value","options","Array","keys","bind","Input","type","style","width","defaultValue","onChange","o","WordItem","toggleCheckox","handleUpdateWeight","word","use","handleUpdateWord","importance","title","checked","weight","WordsDesk","wordsList","_","findIndex","w","updateWordsList","fontWeight","Game","resetTimer","getTime","reset","start","selectNewWord","filter","showCount","isActive","shownWord","sec","maxTimeSec","choosenWord","length","wordsListNew","wordId","rwc","find","parseInt","selectRandomWord","fontSize","initialTime","direction","timeToUpdate","Fragment","Seconds","Button","outline","color","toggleGame","range","stop","step","Math","ceil","fill","x","y","App","minTimeSec","gameTime","stateTime","isGame","handleUpdateWordsList","document","min_time_sec","max_time_sec","CardBody","CardTitle","alignSelf","disabled","play","mainMenu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8b751330.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Nav, NavItem, NavLink} from 'reactstrap';\nimport axios from \"axios\";\n\n\nclass Modes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeMode: {\n                id: 0,\n                name: \"\",\n                description: \"\",\n                min_time: 0,\n                max_time: 0\n            },\n            modesList: [],\n        }\n    }\n\n    componentDidMount() {\n        this.refreshList();\n    }\n\n    refreshList = () => {\n        axios\n            .get(\"/api/modes/\")\n            .then(res => {\n                    this.setState({\n                        modesList: res.data\n                    });\n                    this.activateMode(res.data[0])\n                }\n            )\n            .catch(err => console.log(err));\n    };\n\n    activateMode = (mode) => {\n        this.setState({activeMode: mode});\n        this.props.updateActiveMode(mode);\n    };\n\n    renderModes = () => {\n        const modesItems = this.state.modesList\n        return modesItems.map(mode => (\n            <NavItem key={mode.id}>\n                <NavLink\n                    active={mode.id === this.state.activeMode.id}\n                    onClick={() => this.activateMode(mode)}\n                    href='#'>\n                    {mode.name}\n                </NavLink>\n            </NavItem>\n        ));\n    };\n\n    render() {\n        return (\n            <div className=\"col-md-6 col-sm-10 mx-auto p-0 \">\n                <Nav>\n                    {this.renderModes()}\n                </Nav>\n            </div>\n        )\n    }\n}\n\nexport default Modes;","import React, {Component} from \"react\";\nimport {Input} from 'reactstrap';\n\n\nclass Weight extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: [...Array(11).keys()],\n            active: this.props.active\n        }\n        this.changeWeight = this.changeWeight.bind(this)\n    }\n\n    changeWeight = (e) => {\n         this.props.updateWeight(e.target.value)\n    }\n\n    render() {\n        return (\n            <Input type=\"select\"\n                   name=\"select\"\n                   id=\"exampleSelect\"\n                   style={{width: \"auto\"\n                   }}\n                   defaultValue={this.state.active}\n                   onChange={this.changeWeight}\n            >\n                {this.state.options.map( o =>\n                    <option key={o}\n                            value={o}\n                    >{o}</option>\n                )}\n            </Input>\n        )\n    }\n}\n\nexport default Weight;","import React, {Component} from \"react\";\nimport {Input} from \"reactstrap\";\nimport Weight from './Weight'\n\n\nclass WordItem extends Component {\n    constructor(props) {\n        super(props);\n        this.toggleCheckox = this.toggleCheckox.bind(this);\n        this.handleUpdateWeight = this.handleUpdateWeight.bind(this);\n    }\n\n    toggleCheckox() {\n        const word = {\n            ...this.props.word,\n            use: !this.props.word.use\n        }\n        this.props.handleUpdateWord(word)\n    }\n\n    handleUpdateWeight(value) {\n        const word = {\n            ...this.props.word,\n            importance: value\n        }\n        this.props.handleUpdateWord(word)\n    }\n\n    render() {\n        return (\n            <li\n                key={this.props.word.id}\n                className=\"list-group-item d-flex justify-content-between\"\n            >\n                <span\n                    title={this.props.word.name}\n                >\n              {this.props.word.name}\n            </span>\n                <span>\n                    <Input type=\"checkbox\"\n                           id={this.props.word.id}\n                           checked={this.props.word.use}\n                           onChange={this.toggleCheckox}\n                    />\n                   <Weight active={this.props.word.weight}\n                           updateWeight={this.handleUpdateWeight}\n                   />\n                </span>\n            </li>\n        )\n    }\n}\n\nexport default WordItem;","import React, {Component} from \"react\";\nimport WordItem from \"./WordItem\";\nimport _ from \"lodash\"\n\n\nclass WordsDesk extends Component {\n    constructor(props) {\n        super(props);\n        this.handleUpdateWord = this.handleUpdateWord.bind(this)\n    }\n\n    handleUpdateWord(word) {\n        let wordsList = this.props.wordsList\n        const idx = _.findIndex(wordsList, function(w) { return w.id == word.id})\n        wordsList[idx] = word\n        this.props.updateWordsList(wordsList)\n    }\n\n    render() {\n        return (\n            <div>\n                <li\n                    key=\"some key\"\n                    className=\"list-group-item d-flex justify-content-between align-items-center\"\n                >\n                <span style={{fontWeight: 100}}> {\"Word\"} </span>\n                <span style={{fontWeight: 100}}> {\"Weight\"} </span>\n                </li>\n\n                <ul className=\"list-group list-group-flush\">\n                    {this.props.wordsList.map(\n                        word => <WordItem\n                                    word={word}\n                                    key={word.id}\n                                    handleUpdateWord={this.handleUpdateWord}\n                        />\n                        )\n                    }\n                </ul>\n                <div className=\"\">\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default WordsDesk;\n","import React, {Component} from \"react\";\nimport {Button} from 'reactstrap';\nimport Timer from 'react-compound-timer';\nimport '../css/Show.css';\nimport _ from 'lodash'\nimport rwc from \"random-weighted-choice\"\n\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        let wordsList = _.filter(props.data.wordsList, function (w) {\n            return w.use !== false\n        });\n        wordsList = _.map(wordsList,\n            function (w) {\n                w.showCount = 0;\n                w.isActive = false;\n                return w\n            }\n        )\n        this.state = {\n            ...props.data.activeMode,\n            wordsList: wordsList,\n            shownWord: 'Play with me!',\n            sec: props.data.activeMode.maxTimeSec\n        }\n    }\n\n    componentDidMount() {\n        this.selectNewWord()\n    }\n\n    selectNewWord() {\n        function selectRandomWord(wordsList, shownWord) {\n            if (wordsList.length > 1) {\n                const wordsListNew = _.filter(wordsList, function (w) {\n                    return w.name !== shownWord;\n                });\n                const wordId = rwc(wordsListNew);\n                const choosenWord = _.find(wordsList, {id: parseInt(wordId)});\n                return choosenWord.name;\n            } else {\n                return wordsList[0].name;\n            }\n        }\n\n        const choosenWord = selectRandomWord(this.state.wordsList, this.state.shownWord);\n\n        this.setState({\n            shownWord: choosenWord\n        });\n    }\n\n    resetTimer = (getTime, reset, start) => {\n        if (getTime() < 100) {\n            reset();\n            start();\n            this.selectNewWord();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Show\">\n                <header className=\"Show-header\">\n                    <div>\n                        <p style={{fontSize: \"xxx-large\"}}>\n                            {this.state.shownWord}\n                        </p>\n                        <Timer\n                            initialTime={this.state.sec * 1000}\n                            direction=\"backward\"\n                            timeToUpdate={995}\n                        >\n                            {({ start, reset, getTime }) => (\n                                <React.Fragment>\n                                    <div>\n                                        <Timer.Seconds\n                                            onChange={this.resetTimer(getTime, reset, start)}\n                                        />\n                                    </div>\n                                    <br />\n                                </React.Fragment>\n                            )}\n                        </Timer>\n                    </div>\n                    <div className=\"stop-training\">\n                        <Button outline color=\"primary\"\n                                onClick={e => this.props.toggleGame()}\n                        >Stop</Button>\n                    </div>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React, {Component} from \"react\";\nimport {CardTitle, CardBody, Button} from 'reactstrap';\nimport Modes from './components/Modes'\nimport WordsDesk from './components/WordsDesk'\nimport Game from './components/Game'\nimport axios from \"axios\";\n\n\nconst range = (start, stop, step = 1) =>\n    Array(Math.ceil((stop - start) / step)).fill(start).map((x, y) => x + y * step)\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            wordsList: [],\n            activeMode: {\n                description: \"\",\n                minTimeSec: 10,\n                maxTimeSec: 15,\n                gameTime: 60,\n                stateTime: {\n                    active: 3,\n                    options: range(1, 6, 1),\n                }\n            },\n            isGame: false\n        };\n        this.updateActiveMode = this.updateActiveMode.bind(this)\n        this.toggleGame = this.toggleGame.bind(this)\n        this.handleUpdateWordsList = this.handleUpdateWordsList.bind(this)\n    }\n\n    componentDidMount() {\n        document.title = \"Prompter\";\n    }\n\n    updateActiveMode(mode) {\n        this.setState({\n            activeMode: {\n                description: mode.description,\n                minTimeSec: mode.min_time_sec,\n                maxTimeSec: mode.max_time_sec,\n                gameTime: 60\n            }\n        });\n\n        axios\n            .get(`/api/words/?mode=${mode.id}`)\n            .then(res => this.setState({wordsList: res.data}))\n            .catch(err => console.log(err));\n    }\n\n    toggleGame() {\n        this.setState({\n            isGame: !this.state.isGame\n        })\n    }\n\n    handleUpdateWordsList(wordsList) {\n        this.setState({\n            wordsList: wordsList\n        })\n    }\n\n    mainMenu() {\n        return (\n            <main className=\"content\">\n                <h1 className=\"text-white text-uppercase text-center my-4\">PROMPTER</h1>\n                <Modes updateActiveMode={this.updateActiveMode} />\n                <div className=\"row \">\n                    <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n                        <div className=\"card p-3\">\n                            <CardBody>\n                                <CardTitle className=\"text-center\"> {this.state.activeMode.description} </CardTitle>\n                            </CardBody>\n                            <CardBody>\n                                <li\n                                    key=\"time menu\"\n                                    className=\" d-flex justify-content-between align-items-center\"\n                                >\n                                    <span style={{fontWeight: 300}}> {\"Keep state sec\"} </span>\n                                     <span style={{fontWeight: 300}}> {`${this.state.activeMode.maxTimeSec}`} </span>\n                                </li>\n                            </CardBody>\n                            <WordsDesk\n                                wordsList={this.state.wordsList}\n                                updateWordsList={this.handleUpdateWordsList}\n                            />\n                            <div style={{alignSelf: \"center\"}}>\n                                <Button color=\"primary\"\n                                        onClick={e => this.toggleGame()}\n                                        disabled={this.state.wordsList.length === 0}\n                                >Start training!</Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n        );\n    }\n\n    play() {\n        return (\n            <Game toggleGame={this.toggleGame} data={this.state}/>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isGame ? this.play() : this.mainMenu()}\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}